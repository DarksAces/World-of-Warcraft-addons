name: Upload Alpha to CurseForge

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  find-addons:
    runs-on: ubuntu-latest
    outputs:
      addons: ${{ steps.set-matrix.outputs.addons }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find all addons with .pkgmeta
        id: set-matrix
        run: |
          addons="[]"
          for dir in Alpha/*/; do
            if [ -f "$dir/.pkgmeta" ]; then
              addon_name=$(basename "$dir")
              
              # Detect TOC file
              TOC_FILE=$(ls "$dir"/*.toc | head -n 1)
              TOC_NAME=$(basename "$TOC_FILE" .toc)

              # Ensure package-as is correct
              if ! grep -q '"package-as"' "$dir/.pkgmeta"; then
                echo "{\"package-as\": \"$TOC_NAME\"}" > "$dir/.pkgmeta"
                echo "Added package-as=$TOC_NAME to $dir/.pkgmeta"
              fi

              addons=$(echo "$addons" | jq -c ". += [\"$addon_name\"]")
              echo "Found addon: $addon_name"
            fi
          done
          echo "All addons: $addons"
          echo "addons=$addons" >> $GITHUB_OUTPUT

  release:
    needs: find-addons
    if: needs.find-addons.outputs.addons != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: ${{ fromJson(needs.find-addons.outputs.addons) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Prepare addon for packaging
        run: |
          echo "Packaging addon: ${{ matrix.addon }}"
          TEMP_DIR=$(mktemp -d)
          cp Alpha/${{ matrix.addon }}/*.toc "$TEMP_DIR/"
          cp Alpha/${{ matrix.addon }}/.pkgmeta "$TEMP_DIR/"
          cp Alpha/${{ matrix.addon }}/*.lua "$TEMP_DIR/"
          cd "$TEMP_DIR"
          ls -la  # Verifica que .toc y .pkgmeta estén aquí


      - name: Package and upload to CurseForge
        uses: BigWigsMods/packager@v2
        with:
          args: -g 11.0.5
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
